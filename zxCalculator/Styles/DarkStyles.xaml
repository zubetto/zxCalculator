<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    mc:Ignorable="d">
    
    <!-- BRUSHES SOLID COLOR -->
    <SolidColorBrush x:Key="SolidColor_ActiveCyan" Color="#FFBEE6FD"/>
    <SolidColorBrush x:Key="SolidColor_ForeGrey" Color="#FFBEE6FD"/>

    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>

    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#D5DFE5"/>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="#FF717171" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="0" Grid.Row="1" Grid.RowSpan="3">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--GROUP_BOX STYLE-->
    <Style x:Key="FlatGroupBox" TargetType="{x:Type GroupBox}">
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type GroupBox}">
            <Grid SnapsToDevicePixels="True">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="33*"/>
              </Grid.RowDefinitions>
              <Rectangle x:Name="BorderRect" RadiusY="2" RadiusX="2" Grid.Row="0" Grid.RowSpan="2" Fill="Transparent"
                         Stroke="{TemplateBinding BorderBrush}"
                         StrokeThickness="{TemplateBinding BorderThickness}"/>
              <Rectangle x:Name="HeaderRect" Grid.Row="0" Fill="{TemplateBinding BorderBrush}">
                <Rectangle.RadiusY>
                  <Binding ElementName="BorderRect" Path="RadiusY"/>
                </Rectangle.RadiusY>
                <Rectangle.RadiusX>
                  <Binding ElementName="BorderRect" Path="RadiusX"/>
                </Rectangle.RadiusX>
              </Rectangle>
              <UniformGrid Rows="2" Columns="1">
                <Rectangle x:Name="emptyRect"/>
                <Rectangle x:Name="innerRect" Margin="0,0,0,-2"
                           Fill="{TemplateBinding BorderBrush}"/>
              </UniformGrid>
              <ContentPresenter ContentSource="Header" HorizontalAlignment="Left" Grid.Row="0" Margin="5,0,0,0"/>
              <ContentPresenter Grid.Row="1"
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Grid>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    
    
    <!--BUTTON TEMPLATE-->
    <ControlTemplate x:Key="ButtonControlTemplate1" TargetType="{x:Type Button}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" Background="#FF3C3C3C">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <!--Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FFBEE6FD"/-->
                <!--Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/-->
                <Setter Property="BorderBrush" TargetName="border" Value="#FFBEE6FD"/>
            </Trigger>
            <Trigger Property="IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <!--Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FFBEE6FD"/-->
                <!--Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/-->
                <Setter Property="BorderBrush" TargetName="border" Value="#FFBEE6FD"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>
                <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--BUTTON STYLE-->
    <Style TargetType="Button">
        <Setter Property="Foreground" Value="#FFB6B6B6" />
        <Setter Property="BorderBrush" Value="#FF707070"/>
        <Setter Property="Template" Value="{StaticResource ButtonControlTemplate1}"/>
    </Style>

    <!--BUTTON ACTIVE STYLE-->
    <Style x:Key="ButtonActive" TargetType="Button">
        <Setter Property="Foreground" Value="{StaticResource SolidColor_ActiveCyan}"/>
      <!--Setter Property="BorderBrush" Value="{StaticResource SolidColor_ActiveCyan}"/-->
        <Setter Property="Template" Value="{StaticResource ButtonControlTemplate1}"/>
    </Style>

    <!--BUTTON_NumSpinner TEMPLATE-->
    <ControlTemplate x:Key="ButtonNumSpinner" TargetType="{x:Type RepeatButton}">
        <Border x:Name="border" BorderBrush="{x:Null}" Background="{x:Null}" BorderThickness="0" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FFBEE6FD"/>
                <!--Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/-->
                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FFBEE6FD"/>
                <!--Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/-->
                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF44ADEA"/>
                <!--Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/-->
                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--BUTTON_NumSpinner STYLE-->
    <Style TargetType="RepeatButton" x:Key="ButtonNumSpinnerStyle">
        <Setter Property="Foreground" Value="#FFB6B6B6" />
        <Setter Property="Template" Value="{StaticResource ButtonNumSpinner}"/>
    </Style>

    <!--TEXTBOX STYLE Dial-->
    <Style x:Key="TextBoxStyle_DigiOut" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="#FFB4B4B4"/>
        <Setter Property="Background" Value="#FF202020"/>
        <Setter Property="BorderBrush" Value="#FF707070"/>
        <Setter Property="FontFamily" Value="Cambria Math"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="Border" SnapsToDevicePixels="True" BorderThickness="1" Padding="0" BorderBrush="{TemplateBinding BorderBrush}">

                            <!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource SimpleScrollViewer}" Background="{TemplateBinding Background}"/>

                        </Border>
                        <Rectangle x:Name="progressBar" Margin="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsEnabled" Value="True"/>
    </Style>

    <!--TEXTBOX STYLE Active Dial-->
    <Style x:Key="ActiveDial" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxStyle_DigiOut}">
        <Setter Property="Foreground" Value="#FFE0E0A2"/>
        <Setter Property="BorderBrush" Value="{StaticResource SolidColor_ActiveCyan}"/>
    </Style>

    <!--TEXTBOX STYLE Args input-->
    <Style x:Key="TextBoxStyle_ArgInput" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="#FFB4B4B4"/>
        <Setter Property="Background" Value="#FF202020"/>
        <Setter Property="FontFamily" Value="Cambria Math"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="IsReadOnly" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="Border" SnapsToDevicePixels="True" BorderThickness="1" Padding="0" BorderBrush="#FF707070">
                            <DockPanel LastChildFill="True">
                                <DockPanel DockPanel.Dock="Right" Width="12" Background="{TemplateBinding Background}">
                                    <RepeatButton x:Name="rebttIncrease" Content="5" DockPanel.Dock="Top" Height="12" FontFamily="Marlett" FontSize="10" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="0,2,0,0" VerticalAlignment="Top"
                                            Style="{StaticResource ButtonNumSpinnerStyle}"/>
                                    <RepeatButton x:Name="rebttDecrease" Content="6" DockPanel.Dock="Bottom" Height="12" FontFamily="Marlett" FontSize="10" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="0,0,0,2" VerticalAlignment="Top"
                                            Style="{StaticResource ButtonNumSpinnerStyle}"/>

                                </DockPanel>
                                
                                <!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                                <ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource SimpleScrollViewer}" Background="{TemplateBinding Background}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ARGS DOCKPANEL-->
    <DataTemplate x:Key="ArgumentsPanel">
        <DockPanel x:Name="dockArguments" Height="25" LastChildFill="True" Margin="0,2,0,0">
            <Label x:Name="labelboxArgLabel"
                            Background="#FF323232" Foreground="#FFB4B4B4" BorderBrush="{x:Null}" FontFamily="Cambria Math" BorderThickness="1"
                            DockPanel.Dock="Left" Width="50" HorizontalContentAlignment="Center" Content="x, s" VerticalContentAlignment="Bottom" Padding="1,1,1,5" FontSize="12"/>
            <ToggleButton x:Name="addRange" Content="Range" Margin="2,0,0,0"
                            DockPanel.Dock="Right" FontFamily="Cambria Math" Padding="3,1" Width="54" FontSize="12"/>
            <TextBox x:Name="txtboxInput" 
                            TextWrapping="NoWrap" Text="25.125402" 
                            Background="#FF202020" Foreground="#FFB4B4B4" BorderBrush="{x:Null}" VerticalContentAlignment="Bottom" HorizontalContentAlignment="Right" FontFamily="Cambria Math" FontSize="16" Style="{DynamicResource TextBoxStyle_ArgInput}" BorderThickness="1" IsUndoEnabled="False"/>
        </DockPanel>
    </DataTemplate>

</ResourceDictionary>